globals [
  epoch-error   ;; error promedio en esta epoca
  perceptron    ;; unico nodo de salida
  input-node-1  ;; mantener los nodos de entrada en globales para que podamos hacer referencia
  input-node-2  ;; directa y claramente
]

;; Un perceptrón se modela mediante agentes de nodo de entrada y de nodo de polarización
;; conectados a un agente de nodo de salida.

;; Conexiones de los nodos de entrada a los nodos de salida
;; en un perceptrón.
links-own [ weight ]

;; todos los nodos una activación
;; los nodos de entrada tienen un valor de 1 o -1
;; los nodos bias son siempre 1
turtles-own [activation]

breed [ input-nodes input-node ]

;; los nodos de polarización son nodos de entrada cuya activación es siempre 1.
breed [ bias-nodes bias-node ]

;; los nodos de salida calculan la parte ponderada de sus
;; entradas y, a continuación, establecer su activación a 1 si
;; la suma es mayor que su umbral.  Un nodo de salida ;;
;; nodo de salida también puede ser el nodo de entrada de otro perceptrón.
breed [ output-nodes output-node ]
output-nodes-own [threshold]

;;
;; Setup
;;

to setup
  clear-all

  ;; poner nuestro fondo en algo más visible que el negro
  ask patches [ set pcolor grey ]

  set-default-shape input-nodes "circle"
  set-default-shape bias-nodes "bias-node"
  set-default-shape output-nodes "output-node"

  create-output-nodes 1 [
    set activation random-activation
    set xcor 6
    set size 2
    set threshold 0
    set perceptron self
  ]

  create-bias-nodes 1 [
    set activation 1
    setxy 3 7
    set size 1.5
    my-create-link-to perceptron

  ]

  create-input-nodes 1 [
    setup-input-node
    setxy -6 5
    set input-node-1 self
  ]

  create-input-nodes 1 [
    setup-input-node
    setxy -6 0
    set input-node-2 self
  ]

  ask perceptron [ compute-activation ]
  reset-ticks
end

to setup-input-node
    set activation random-activation
    set size 1.5
    my-create-link-to perceptron
end

; enlaza un nodo de entrada o de polarización con un nodo de salida
to my-create-link-to [ anode ] ;; procedimiento del nodo de entrada o sesgo
  create-link-to anode [
    set color red + 1
    ;; los enlaces comienzan con un peso aleatorio
    set weight random-float 0.1 - 0.05
    set shape "small-arrow-shape"

  ]
end

;;
;; Procedimientos de ejecución
;;

;; entrena establece los nodos de entrada a una entrada aleatoria
;; calcula la salida
;; determina la respuesta correcta y retropropaga los cambios de peso
to train ;; observer procedure
  set epoch-error 0
  repeat examples-per-epoch
  [
    ;; establece los nodos de entrada aleatoriamente
    ask input-nodes
      [ set activation random-activation ]

    ;; distribuir error
    ask perceptron [
      compute-activation
      update-weights target-answer
      recolor
    ]
  ]

  ;; trazar estadisticas
  set epoch-error epoch-error / examples-per-epoch
  set epoch-error epoch-error * 0.5
  tick
  plot-error
  plot-learned-line
end

;; calcular la activación sumando las entradas * pesos \
;; y se ejecuta a través de la función de signo que determina si
;; el valor calculado está por encima o por debajo del umbral
to compute-activation ;; procedimiento del nodo de salida
  set activation sign sum [ [activation] of end1 * weight ] of my-in-links
  recolor
end

to update-weights [ answer ] ;; procedimiento del nodo de salida
  let output-answer activation

  ;; calcular el error de los nodos de salida
  let output-error answer - output-answer

  ;; actualizar el error de época
  set epoch-error epoch-error + (answer - sign output-answer) ^ 2

  ;; examinar las aristas de entrada-salida y fijar su nuevo peso
  ;; aumentándolo o disminuyéndolo en un valor determinado por la tasa de aprendizaje
  ask my-in-links [
    set weight weight + learning-rate * output-error * [activation] of end1
  ]
end

;; calcula la función signo dado un valor de entrada
to-report sign [input]  ;; output-node procedure
  ifelse input > threshold
  [ report 1 ]
  [ report -1 ]
end

to-report random-activation ;; observer procedure
  ifelse random 2 = 0
  [ report 1 ]
  [ report -1 ]
end

to-report target-answer ;; observer procedure
  let a [activation] of input-node-1 = 1
  let b [activation] of input-node-2 = 1
  report ifelse-value (run-result (word "my-" target-function " a b")) [1][-1]
end

to-report my-or [a b];; output-node procedure
  report (a or b)
end

to-report my-xor [a b] ;; output-node procedure
  report (a xor b)
end

to-report my-and [a b] ;; output-node procedure
  report (a and b)
end

to-report my-nor [a b] ;; output-node procedure
  report not (a or b)
end

to-report my-nand [a b] ;; output-node procedure
  report not (a and b)
end

;; la prueba ejecuta una instancia y calcula el resultado
to test ;; observer procedure
  ask input-node-1 [ set activation input-1 ]
  ask input-node-2 [ set activation input-2 ]

  ;; calcular la respuesta correcta
  let correct-answer target-answer

  ;; colorear los nodos
  ask perceptron [ compute-activation ]

  ;; calcular la respuesta

  let output-answer [activation] of perceptron

  ;; arrojar el resultado
  ifelse output-answer = correct-answer
  [
    user-message (word "Output: " output-answer "\nTarget: " correct-answer "\nCorrect Answer!")
  ]
  [
    user-message (word "Output: " output-answer "\nTarget: " correct-answer "\nIncorrect Answer!")
  ]
end


;; Sets the color of the perceptron's nodes appropriately
;; based on activation
to recolor ;; output, input, or bias node procedure
  ifelse activation = 1
    [ set color white ]
    [ set color black ]
  ask in-link-neighbors [ recolor ]

  resize-recolor-links
end

;; cambiar el tamaño y el color de los bordes
;; redimensionar para indicar peso
;; cambiar el color para indicar positivo o negativo
to resize-recolor-links
  ask links [
    ifelse show-weights?
    [ set label precision weight 4 ]
    [ set label "" ]
    set thickness 0.1 + 20 * abs weight
    ifelse weight > 0
      [ set color [ 255 0 0 196 ] ]   ; rojo transparente
      [ set color [ 0 0 255 196 ] ] ; azul claro transparente
  ]
end

;;
;;Procedimientos de trazado
;;

;; trazar el error del entrenamiento
to plot-error ;; observer procedure
  set-current-plot "Error vs. Epochs"
  plotxy ticks epoch-error
end

;; trazar la línea de decisión aprendida
to plot-learned-line ;; observer procedure
  set-current-plot "Rule Learned"
  clear-plot

  run word "plot-" target-function

  ;; recorre todos los valores x y traza los valores x correspondientes
  let edge1 [out-link-to perceptron] of input-node-1
  let edge2 [out-link-to perceptron] of input-node-2

  foreach (range -2 3) [ x1 ->
     ;calcular w0 (el peso de sesgo)
    let w0 sum [[weight] of out-link-to perceptron] of bias-nodes

    ; juntarlo todo
    let x2 ( (- w0 - [weight] of edge1 * x1) / [weight] of edge2 )

    ;; trazar x1, x2
    set-current-plot-pen "rule"
    plotxy x1 x2
  ]
end

to plot-or
  set-current-plot-pen "positives"
  plotxy -1 1
  plotxy 1 1
  plotxy 1 -1
  set-current-plot-pen "negatives"
  plotxy -1 -1
end

to plot-xor
  set-current-plot-pen "positives"
  plotxy -1 1
  plotxy 1 -1
  set-current-plot-pen "negatives"
  plotxy 1 1
  plotxy -1 -1
end

to plot-and
  set-current-plot-pen "positives"
  plotxy 1 1
  set-current-plot-pen "negatives"
  plotxy 1 -1
  plotxy -1 1
  plotxy -1 -1
end

to plot-nor
  set-current-plot-pen "positives"
  plotxy -1 -1
  set-current-plot-pen "negatives"
  plotxy 1 1
  plotxy 1 -1
  plotxy -1 1
end

to plot-nand
  set-current-plot-pen "positives"
  plotxy -1 -1
  plotxy 1 -1
  plotxy -1 1
  set-current-plot-pen "negatives"
  plotxy 1 1
end
